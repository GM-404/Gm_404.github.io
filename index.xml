<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我的博客</title>
    <link>https://gm-404.github.io/algolia.json</link>
    <description>Recent content from 我的博客</description>
    <generator>Hugo</generator>
    <language>en</language>
    
    <managingEditor>19513317149@163.com (GM-404)</managingEditor>
    <webMaster>19513317149@163.com (GM-404)</webMaster>
    
    <copyright>All articles on this blog are licensed under the BY-NC-SA license agreement unless otherwise stated. Please indicate the source when reprinting!</copyright>
    
    <lastBuildDate>Wed, 15 Oct 2025 00:00:00 +0000</lastBuildDate>
    
    
    <atom:link href="https://gm-404.github.io/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>markdown常见基础命令</title>
      <link>https://gm-404.github.io/post/markdown%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Oct 2025 00:00:00 &#43;0000</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/markdown%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>
        <![CDATA[<h1>markdown常见基础命令</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <h1 id="一些插件">
<a class="header-anchor" href="#%e4%b8%80%e4%ba%9b%e6%8f%92%e4%bb%b6"></a>
一些插件
</h1><p>Markdown All in One  提供自动补全
Markdown Preview Enhanced  优化渲染效果
Markdown Image 改善本地图片的插入效果</p>
<h3 id="1标题让你的内容层次分明">
<a class="header-anchor" href="#1%e6%a0%87%e9%a2%98%e8%ae%a9%e4%bd%a0%e7%9a%84%e5%86%85%e5%ae%b9%e5%b1%82%e6%ac%a1%e5%88%86%e6%98%8e"></a>
1.标题:让你的内容层次分明
</h3><h1 id="一级标题">
<a class="header-anchor" href="#%e4%b8%80%e7%ba%a7%e6%a0%87%e9%a2%98"></a>
一级标题
</h1><h2 id="二级标题">
<a class="header-anchor" href="#%e4%ba%8c%e7%ba%a7%e6%a0%87%e9%a2%98"></a>
二级标题
</h2><h3 id="三级标题">
<a class="header-anchor" href="#%e4%b8%89%e7%ba%a7%e6%a0%87%e9%a2%98"></a>
三级标题
</h3><hr>
<h3 id="2段落与换行">
<a class="header-anchor" href="#2%e6%ae%b5%e8%90%bd%e4%b8%8e%e6%8d%a2%e8%a1%8c"></a>
2.段落与换行
</h3><p>&mdash;为分割线效果
功能二<!-- raw HTML omitted -->为换行符
现在是2025年4月11号晚上10点，我在学习
继续努力</p>
<hr>
<h3 id="3字体样式强调你的文字">
<a class="header-anchor" href="#3%e5%ad%97%e4%bd%93%e6%a0%b7%e5%bc%8f%e5%bc%ba%e8%b0%83%e4%bd%a0%e7%9a%84%e6%96%87%e5%ad%97"></a>
3.字体样式：强调你的文字
</h3><p><em>斜体</em>
<strong>粗体</strong>
<em><strong>粗斜体</strong></em>
<del>删除线</del></p>
<hr>
<h3 id="4列表">
<a class="header-anchor" href="#4%e5%88%97%e8%a1%a8"></a>
4.列表
</h3><p><strong>无序列表</strong></p>
<ul>
<li>可以使用横杠，加号或者星号加空格来开始一行</li>
<li>吃饭</li>
<li>睡觉</li>
<li>打豆豆</li>
</ul>
<p><strong>有序列表</strong></p>
<ol>
<li>有序列表使用数字加.号来开始一行</li>
<li></li>
<li></li>
</ol>
<hr>
<h3 id="5链接与图片">
<a class="header-anchor" href="#5%e9%93%be%e6%8e%a5%e4%b8%8e%e5%9b%be%e7%89%87"></a>
5.链接与图片
</h3><p><a href="http://www.baidu.com">百度</a>
<a href="https://github.com/GM-404/CMake_study.git">本项目github地址</a></p>
<p><img src="https://images.app.goo.gl/aY9EW8VJwbaNj7CD7" alt="图片">网图不显示
<img src="%E8%87%AA%E6%8B%8D.jpg" alt="自拍"> 那就来一张自拍</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="6代码块">
<a class="header-anchor" href="#6%e4%bb%a3%e7%a0%81%e5%9d%97"></a>
6.代码块
</h3><ul>
<li>单行代码<code>print(&quot;Hello World&quot;)</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello World&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello World&#34;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h3 id="7引用">
<a class="header-anchor" href="#7%e5%bc%95%e7%94%a8"></a>
7.引用
</h3><blockquote>
<p>引用，这是第一次引用</p>
        
        <hr><p>Published on 2025-10-15 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2025-10-15</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>力扣刷题</title>
      <link>https://gm-404.github.io/post/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/</link>
      <pubDate>Mon, 29 Sep 2025 00:00:00 &#43;0000</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/</guid>
      <description>
        <![CDATA[<h1>力扣刷题</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <h1 id="基础知识">
<a class="header-anchor" href="#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86"></a>
基础知识
</h1><h2 id="链表代码实现">
<a class="header-anchor" href="#%e9%93%be%e8%a1%a8%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0"></a>
链表代码实现
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdexcept&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">MyLinkedList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">prev</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">;</span> <span class="c1">// 虚拟头节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="n">tail</span><span class="p">;</span> <span class="c1">// 虚拟尾节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 辅助函数：查找索引处的节点（用于插入和遍历）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 当 index = size 时，返回 tail 节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="nf">getNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// **优化：从头尾中较近的一端开始遍历**
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 从头开始：head-&gt;next 是 index 0 对应的节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 从尾开始：tail-&gt;prev 是 index size-1 对应的节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">p</span> <span class="o">=</span> <span class="n">tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="n">index</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查 index 索引位置是否可以存在元素 [0, size-1]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="nf">isElementIndex</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查 index 索引位置是否可以添加元素 [0, size]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="nf">isPositionIndex</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyLinkedList</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 析构函数（补充：用于释放内存，解决内存泄漏）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">~</span><span class="n">MyLinkedList</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">delete</span> <span class="n">curr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// --- 增加 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="nf">addAtHead</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 利用 addAtIndex(0, val) 实现最简洁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addAtTail</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 利用 addAtIndex(size, val) 实现最简洁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addAtIndex</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addAtIndex</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 核心修改：检查位置索引的有效性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isPositionIndex</span><span class="p">(</span><span class="n">index</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 题目要求：如果 index 比长度更大，该节点将不会插入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 这里我们直接返回，不抛出异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 找到插入位置的节点 (node)，它将成为新节点 x 的 next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 当 index=size 时，node 刚好是 tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">getNode</span><span class="p">(</span><span class="n">index</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">prev_node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 插入操作： prev_node &lt;-&gt; x &lt;-&gt; node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">x</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">prev_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev_node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 更新数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">size</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// --- 查 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 核心修改：检查元素索引的有效性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isElementIndex</span><span class="p">(</span><span class="n">index</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// 题目要求：下标无效，返回 -1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 找到 index 对应的 Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">getNode</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 由于上面已经检查了索引，p 必然是有效的实际元素节点，不是 tail 或 nullptr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// --- 删 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="nf">deleteAtIndex</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 核心修改：检查元素索引的有效性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isElementIndex</span><span class="p">(</span><span class="n">index</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span> <span class="c1">// 题目要求：如果下标无效，不执行删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 找到 index 对应的 Node (x)，它必然是有效的实际元素节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">x</span> <span class="o">=</span> <span class="n">getNode</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 绕过 x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 对删去的节点清空内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">delete</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 更新数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h2 id="哈希表">
<a class="header-anchor" href="#%e5%93%88%e5%b8%8c%e8%a1%a8"></a>
哈希表
</h2><h3 id="哈希表核心原理">
<a class="header-anchor" href="#%e5%93%88%e5%b8%8c%e8%a1%a8%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86"></a>
哈希表核心原理
</h3><p>哈希表可以理解为一个加强版的数组。
数组可以通过索引在 O(1) 的时间复杂度内查找到对应元素，索引是一个非负整数。</p>
        
        <hr><p>Published on 2025-09-29 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2025-10-10</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>炒股日记</title>
      <link>https://gm-404.github.io/post/%E7%82%92%E8%82%A1%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Wed, 01 Oct 2025 21:46:25 &#43;0800</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/%E7%82%92%E8%82%A1%E6%97%A5%E8%AE%B0/</guid>
      <description>
        <![CDATA[<h1>炒股日记</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <h2 id="目前持有">
<a class="header-anchor" href="#%e7%9b%ae%e5%89%8d%e6%8c%81%e6%9c%89"></a>
目前持有
</h2><h3 id="前海联合泳隆混合a">
<a class="header-anchor" href="#%e5%89%8d%e6%b5%b7%e8%81%94%e5%90%88%e6%b3%b3%e9%9a%86%e6%b7%b7%e5%90%88a"></a>
前海联合泳隆混合A
</h3><h3 id="银华上证科创板人工智能etf联接c">
<a class="header-anchor" href="#%e9%93%b6%e5%8d%8e%e4%b8%8a%e8%af%81%e7%a7%91%e5%88%9b%e6%9d%bf%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bdetf%e8%81%94%e6%8e%a5c"></a>
银华上证科创板人工智能ETF联接C
</h3><h3 id="国泰国证有色金属行业指数c">
<a class="header-anchor" href="#%e5%9b%bd%e6%b3%b0%e5%9b%bd%e8%af%81%e6%9c%89%e8%89%b2%e9%87%91%e5%b1%9e%e8%a1%8c%e4%b8%9a%e6%8c%87%e6%95%b0c"></a>
国泰国证有色金属行业指数C
</h3><h3 id="兴业安保优选混合c">
<a class="header-anchor" href="#%e5%85%b4%e4%b8%9a%e5%ae%89%e4%bf%9d%e4%bc%98%e9%80%89%e6%b7%b7%e5%90%88c"></a>
兴业安保优选混合C
</h3><h3 id="中欧信息科技混合c">
<a class="header-anchor" href="#%e4%b8%ad%e6%ac%a7%e4%bf%a1%e6%81%af%e7%a7%91%e6%8a%80%e6%b7%b7%e5%90%88c"></a>
中欧信息科技混合C
</h3><h3 id="银华中证光伏产业etf联接c">
<a class="header-anchor" href="#%e9%93%b6%e5%8d%8e%e4%b8%ad%e8%af%81%e5%85%89%e4%bc%8f%e4%ba%a7%e4%b8%9aetf%e8%81%94%e6%8e%a5c"></a>
银华中证光伏产业ETF联接C
</h3><h3 id="大摩万众创新灵活配置混合a">
<a class="header-anchor" href="#%e5%a4%a7%e6%91%a9%e4%b8%87%e4%bc%97%e5%88%9b%e6%96%b0%e7%81%b5%e6%b4%bb%e9%85%8d%e7%bd%ae%e6%b7%b7%e5%90%88a"></a>
大摩万众创新灵活配置混合A
</h3><h3 id="广发汽车指数c">
<a class="header-anchor" href="#%e5%b9%bf%e5%8f%91%e6%b1%bd%e8%bd%a6%e6%8c%87%e6%95%b0c"></a>
广发汽车指数C
</h3><h3 id="中欧医疗创新股票c">
<a class="header-anchor" href="#%e4%b8%ad%e6%ac%a7%e5%8c%bb%e7%96%97%e5%88%9b%e6%96%b0%e8%82%a1%e7%a5%a8c"></a>
中欧医疗创新股票C
</h3><h3 id="华泰柏瑞港股通医疗精选混合c">
<a class="header-anchor" href="#%e5%8d%8e%e6%b3%b0%e6%9f%8f%e7%91%9e%e6%b8%af%e8%82%a1%e9%80%9a%e5%8c%bb%e7%96%97%e7%b2%be%e9%80%89%e6%b7%b7%e5%90%88c"></a>
华泰柏瑞港股通医疗精选混合C
</h3><h3 id="银华海外数字经济量化选股混合c">
<a class="header-anchor" href="#%e9%93%b6%e5%8d%8e%e6%b5%b7%e5%a4%96%e6%95%b0%e5%ad%97%e7%bb%8f%e6%b5%8e%e9%87%8f%e5%8c%96%e9%80%89%e8%82%a1%e6%b7%b7%e5%90%88c"></a>
银华海外数字经济量化选股混合C
</h3><h3 id="国泰国证有色金属行业指数a">
<a class="header-anchor" href="#%e5%9b%bd%e6%b3%b0%e5%9b%bd%e8%af%81%e6%9c%89%e8%89%b2%e9%87%91%e5%b1%9e%e8%a1%8c%e4%b8%9a%e6%8c%87%e6%95%b0a"></a>
国泰国证有色金属行业指数A
</h3><h3 id="银华中证创新药产业etf联接c">
<a class="header-anchor" href="#%e9%93%b6%e5%8d%8e%e4%b8%ad%e8%af%81%e5%88%9b%e6%96%b0%e8%8d%af%e4%ba%a7%e4%b8%9aetf%e8%81%94%e6%8e%a5c"></a>
银华中证创新药产业ETF联接C
</h3><h3 id="国泰国证食品饮料行业指数c">
<a class="header-anchor" href="#%e5%9b%bd%e6%b3%b0%e5%9b%bd%e8%af%81%e9%a3%9f%e5%93%81%e9%a5%ae%e6%96%99%e8%a1%8c%e4%b8%9a%e6%8c%87%e6%95%b0c"></a>
国泰国证食品饮料行业指数C
</h3><h3 id="华泰柏瑞中证红利低波动etf联接c">
<a class="header-anchor" href="#%e5%8d%8e%e6%b3%b0%e6%9f%8f%e7%91%9e%e4%b8%ad%e8%af%81%e7%ba%a2%e5%88%a9%e4%bd%8e%e6%b3%a2%e5%8a%a8etf%e8%81%94%e6%8e%a5c"></a>
华泰柏瑞中证红利低波动ETF联接C
</h3><h3 id="创金合信医疗保健行业股票c">
<a class="header-anchor" href="#%e5%88%9b%e9%87%91%e5%90%88%e4%bf%a1%e5%8c%bb%e7%96%97%e4%bf%9d%e5%81%a5%e8%a1%8c%e4%b8%9a%e8%82%a1%e7%a5%a8c"></a>
创金合信医疗保健行业股票C
</h3>
        
        <hr><p>Published on 2025-10-01 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2025-10-01</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>搭建博客教程</title>
      <link>https://gm-404.github.io/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 29 Sep 2025 20:12:52 &#43;0800</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</guid>
      <description>
        <![CDATA[<h1>搭建博客教程</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <p>By GM-404</p>
<h3 id="一准备工作">
<a class="header-anchor" href="#%e4%b8%80%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c"></a>
<strong>一、准备工作</strong>
</h3><ol>
<li>
<p><strong>安装 Hugo</strong></p>
<ul>
<li><strong>Windows</strong>：
<ul>
<li>访问 <a href="https://github.com/gohugoio/hugo/releases">Hugo Releases</a> 下载最新的 <code>hugo_extended_xxx_Windows-64bit.zip</code></li>
<li>解压后将 <code>hugo.exe</code> 所在文件夹添加到系统环境变量 <code>PATH</code> 中</li>
</ul>
</li>
<li><strong>macOS</strong>：<code>brew install hugo</code></li>
<li><strong>Linux</strong>：<code>sudo apt install hugo</code> 或通过源码编译</li>
<li>验证安装：终端输入 <code>hugo version</code>，显示版本号则成功</li>
</ul>
</li>
<li>
<p><strong>安装 Git</strong></p>
<ul>
<li>用于版本控制和部署，下载地址：<a href="https://git-scm.com/">Git 官网</a></li>
<li>验证：<code>git --version</code></li>
</ul>
</li>
</ol>
<h3 id="二创建-hugo-博客项目">
<a class="header-anchor" href="#%e4%ba%8c%e5%88%9b%e5%bb%ba-hugo-%e5%8d%9a%e5%ae%a2%e9%a1%b9%e7%9b%ae"></a>
<strong>二、创建 Hugo 博客项目</strong>
</h3><ol start="3">
<li>
<p><strong>初始化博客</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 创建博客目录（blog-name 替换为你的博客名）</span>
</span></span><span class="line"><span class="cl">hugo new site blog-name
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> blog-name
</span></span></code></pre></div></li>
<li>
<p><strong>初始化 Git 仓库</strong></p>
<p>bash</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl"><span class="c1"># 创建 .gitignore 文件（忽略临时文件）</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;public/&#34;</span> &gt;&gt; .gitignore
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;resources/&#34;</span> &gt;&gt; .gitignore
</span></span></code></pre></div></li>
</ol>
<h3 id="三选择并安装主题">
<a class="header-anchor" href="#%e4%b8%89%e9%80%89%e6%8b%a9%e5%b9%b6%e5%ae%89%e8%a3%85%e4%b8%bb%e9%a2%98"></a>
<strong>三、选择并安装主题</strong>
</h3><ol start="5">
<li>
<p><strong>挑选主题</strong></p>
        
        <hr><p>Published on 2025-09-29 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2025-09-29</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>中文測試</title>
      <link>https://gm-404.github.io/post/chinese/</link>
      <pubDate>Thu, 09 Jun 2022 20:12:52 &#43;0800</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/chinese/</guid>
      <description>
        <![CDATA[<h1>中文測試</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <p>This is a Chinese test post.</p>
<p>善我王上魚、產生資西員合兒臉趣論。畫衣生這著爸毛親可時，安程幾？合學作。觀經而作建。都非子作這！法如言子你關！手師也。</p>
<p>以也座論頭室業放。要車時地變此親不老高小是統習直麼調未，行年香一？</p>
<p>就竟在，是我童示讓利分和異種百路關母信過明驗有個歷洋中前合著區亮風值新底車有正結，進快保的行戰從：弟除文辦條國備當來際年每小腳識世可的的外的廣下歌洲保輪市果底天影；全氣具些回童但倒影發狀在示，數上學大法很，如要我……月品大供這起服滿老？應學傳者國：山式排只不之然清同關；細車是！停屋常間又，資畫領生，相們制在？公別的人寫教資夠。資再我我！只臉夫藝量不路政吃息緊回力之；兒足灣電空時局我怎初安。意今一子區首者微陸現際安除發連由子由而走學體區園我車當會，經時取頭，嚴了新科同？很夫營動通打，出和導一樂，查旅他。坐是收外子發物北看蘭戰坐車身做可來。道就學務。</p>
<p>國新故。</p>
<blockquote>
<p>工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？</p></blockquote>
<p><em>From <a href="http://www.richyli.com/tool/loremipsum/">亂數假文產生器 - Chinese Lorem Ipsum</a></em></p>
        
        <hr><p>Published on 2022-06-09 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2022-06-09</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>Markdown 基本使用方法</title>
      <link>https://gm-404.github.io/post/markdown%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 09 Jun 2022 20:12:52 &#43;0800</pubDate>
      <author>19513317149@163.com (GM-404)</author>
      <guid>https://gm-404.github.io/post/markdown%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0/</guid>
      <description>
        <![CDATA[<h1>Markdown 基本使用方法</h1><p>Author: GM-404(19513317149@163.com)</p>
        
          <h2 id="markdown-基本元素">
<a class="header-anchor" href="#markdown-%e5%9f%ba%e6%9c%ac%e5%85%83%e7%b4%a0"></a>
Markdown 基本元素
</h2><h3 id="标题">
<a class="header-anchor" href="#%e6%a0%87%e9%a2%98"></a>
标题
</h3><h1 id="h1">
<a class="header-anchor" href="#h1"></a>
H1
</h1><h2 id="h2">
<a class="header-anchor" href="#h2"></a>
H2
</h2><h3 id="h3">
<a class="header-anchor" href="#h3"></a>
H3
</h3><h4 id="h4">
<a class="header-anchor" href="#h4"></a>
H4
</h4><h5 id="h5">
<a class="header-anchor" href="#h5"></a>
H5
</h5><h6 id="h6">
<a class="header-anchor" href="#h6"></a>
H6
</h6><h3 id="强调">
<a class="header-anchor" href="#%e5%bc%ba%e8%b0%83"></a>
强调
</h3><p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>
<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>
<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>
<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>
<h3 id="列表">
<a class="header-anchor" href="#%e5%88%97%e8%a1%a8"></a>
列表
</h3><h4 id="definition-list-dl">
<a class="header-anchor" href="#definition-list-dl"></a>
Definition List (dl)
</h4><!-- raw HTML omitted -->
<h4 id="ordered-list-ol">
<a class="header-anchor" href="#ordered-list-ol"></a>
Ordered List (ol)
</h4><ol>
<li>List Item 1</li>
<li>List Item 2</li>
<li>List Item 3</li>
</ol>
<h4 id="unordered-list-ul">
<a class="header-anchor" href="#unordered-list-ul"></a>
Unordered List (ul)
</h4><ul>
<li>List Item 1</li>
<li>List Item 2</li>
<li>List Item 3</li>
</ul>
<h3 id="段落">
<a class="header-anchor" href="#%e6%ae%b5%e8%90%bd"></a>
段落
</h3><p>Lorem ipsum dolor sit amet, <a href="">test link</a> consectetur adipiscing elit. <strong>Strong text</strong> pellentesque ligula commodo viverra vehicula. <em>Italic text</em> at ullamcorper enim. Morbi a euismod nibh. <!-- raw HTML omitted -->Underline text<!-- raw HTML omitted --> non elit nisl. <del>Deleted text</del> tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.</p>
        
        <hr><p>Published on 2022-06-09 at <a href='https://gm-404.github.io/'>我的博客</a>, last modified on 2022-06-09</p>]]>
      </description>
      
        <category>test</category>
      
    </item>
    
  </channel>
</rss>
